//#version 140 core
#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

const int maxLights = 10;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[maxLights];
out vec3 toCameraVector;
out float visibility;



uniform mat4 tranformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[maxLights];

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.002;
const float gradient = 4.0;

uniform vec4 plane;

void main(void) {
	

	vec4 worldPosition = tranformationMatrix * vec4(position, 1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if (useFakeLighting > 0.5) {
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	
	surfaceNormal = (tranformationMatrix * vec4(actualNormal, 0.0)).xyz;
	for( int i = 0; i < maxLights; i++) {	
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;

	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
}

